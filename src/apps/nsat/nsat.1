.\" @(#)grasp.1
'\"	# CL - Define straight line
.de SL
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.TH NSAT 1 "1 March 1996" nsat "CNF SAT Solver" 
.SL
.SH NAME
nsat \- CNF satisfiability solver (v2.0)
.SH SYNOPSIS
.B nsat
[
.B [\+|\-]D
]
[
.B [\+|\-]V
]
[
.BI \+B backtrack\-limit
]
[
.BI \+C conflict\-limit
]
[
.BI \+S atabase\-growth\-limit
]
[
.BI \+T max\-runtime
]
[
.BI \+b backtrack-mode
]
[
.BI \+d decision-making
]
[
.BI \+g max-conf-clause-size
]
[
.BI \+i implication-engine
]
[
.BI \+m multiple-conflicts
]
[
.BI \+p preprocess-mode
]
[
.B [\+|\-]u
]
.I file\-name
.SL

.SH DESCRIPTION
nsat is a front-end for GRASP (Generic seaRch Algorithm for
Satisfiability Problems), which permits reading Conjunctive Normal
Form (CNF) formulas in the DIMACS CNF format and allows configuring
GRASP. GRASP denotes a configurable algorithm for solving instances of
the satisfiability problem (SAT), which implements different
techniques for pruning the search space. GRASP can be used as the core
search engine for different SAT-based tools or embedded in other
application-specific tools. This man page is valid for version 2.0 of
GRASP.
.LP
Among other features, GRASP can realize different Boolean constraint
propagation procedures and can implement different forms of
dependency-directed backtracking, in both cases  exploiting the
structure of the problem instance and of the search. If a CNF formula
is viewed as a database of clauses, then GRASP solves instances of SAT
by adding additional clauses to the clause database in order to prune
the amount of search. Different growth rates of the clause database
are permitted. In addition, several techniques are used to control how
clauses are added to the clause database.
.LP
Decision making in GRASP is supported by several heuristics, that are
chosen with the respective command-line argument. The decision making
procedure chosen affects decisively the run times for different
instances of SAT.
.SH OPTIONS
.TP 3
.B [\+|\-]D
Run GRASP with (+) and without (-) DEBUG mode (the default).
.TP 3
.B [\+|\-]V
Run GRASP with (+) and without (-) VERBOSE mode (the default). Running
with VERBOSE mode provides information on how the search evolves.
.TP 3
.BI \+B backtrack\-limit
Defines the maximum number of backtracks that can be used for solving
a given instance of SAT. GRASP quits if this number of backtracks is
reached.
.TP 3
.BI \+C conflict\-limit
Defines the maximum number of conflicts that can be used for solving
a given instance of SAT. GRASP quits if this number of conflicts is
reached. For non-chronological backtracking option +B should be used,
whereas option +C should be used with dynamic backtracking.
.TP 3
.BI \+T max\-runtime
Defines the CPU time that can be used for solving a given instance of
SAT. GRASP quits if this run time is reached.
.TP 3
.BI \+S database\-growth\-limit
Identifies a bound on the growth of the clause database. GRASP quits
is this bound is reached.
.TP 3
.BI \+b backtrack-mode
Can either be 'C' for chronological backtracking, 'N' for
non-chronological backtracking and 'D' for dynamic non-chronological
backtracking. With chronological backtracking the size of teh clause
database is contant.
.TP 3
.BI \+d decision-making
Choice of decision making procedure. Currently, NSAT accepts the
following
.I static
.B decision making heuristics:
.RS
.TP
.B F
Fixed order decision making. Initial order of the variables is kept.
.TP
.B LCS
Prefer variables with the largest combined sum of literals.
.TP
.B LIS
Prefer variables with the largest individual sum of literals.
.TP
.B JW
Static implementation of the Jeroslow-Wang heuristic, which gives
preference to assignments that simplify the smallest clauses.
.RE

In addition, NSAT accepts the following
.I dynamic
decision making heuristics:
.RS
.TP
.B BOHM
Implements Max Bohm's heuristic (from Bohm's technical report).
.TP
.B MSMM
Customized version of MOM's heuristic (from Freeman's dissertation).
.TP
.B MSOS
One-sided variation of Jeroslow-Wang heuristic that includes weighted
contributions of clauses that can be satisfied.
.TP
.B MSTS
Two-sided variation of the above heuristic.
.TP
.B B2WS
Another variation of the above heuristic which gives more weight
given to clauses that can be satisfied by a given assignment.
.TP
.B DLIS
Dynamic LIS (i.e. for each decision assignment apply the LIS
heuristic).
.TP
.B DLCS
Dynamic LCS. Similar to DLIS, but using the LCS heuristic.
.RE
.TP 3
.BI \+g max-conf-clause-size
In the presence of conflicts, this option denotes the largest size of
identified conflicting clauses. This option guarantees a polynomial
growth of the clause database. By default, any clause can be added to
the clause database, and so the growth is exponential.
.TP 3
.BI \+i implication-engine
Defines the boolean constraint propagation procedure to apply after each
decision assignment is made. By default (or with +i0) Boolean
Constraint Propagation (BCP) is used. For the current implementation
only the default option is available.
.TP 3
.BI \+m multiple-conflicts
Specifies that multiple conflicts are to be processed each time a
conflicting decision assignment is made. This technique allows
choosing the conflict that prunes the search tree the most.
.I multiple-conflicts
.B identifies how multiple conflicts are to be analyzed. The intended
analysis options are merged (M) and separate (S). Currently, only
merged analysis can be used.
.TP 3
.BI \+p preprocess-mode
Defines the engine to use for preprocessing purposes.
.TP 3
.B [\+|\-]r
Option (=) (the default) allows repacking a conflicting clause in
terms of decision assignments whenever the size of that conflicting
clause is too large.
.TP 3
.B [\+|\-]t
Option (+) (the default) allows for pruning unnecessary decision
assignments.
.TP 3
.B [\+|\-]u
Option (+) (the default) allows the identification of UIPs. UIPs
permit discovering structure in implication sequences, which provide
stronger pruning conditions.
.SH ENVIRONMENT
The current implementation of nsat and GRASP does not allow for run
time configuration based on environment variables.
.SH BUGS
No oustanding bugs are known as far as the author is aware. In
addition, there are no restrictions on the sizes of formulas and/or
clauses.
.LP
Some features provided in version 1.0 have not yet been incorporated
in version 2.0.
.SH "SEE ALSO"
GRASP was developed as the underlying search engine of a software
package for the analysis of combinational switching circuits. The
primary reference is Joao P. Marques Silva, "Search Algorithms for
Satisfiability Problems in Combinational Switching Circuits",
Ph. D. Dissertation, EECS Department, University of Michigan, Ann
Arbor, May 1995.
.SH AUTHOR
Joao P. Marques Silva, EECS Department, University of Michigan
(jpms@eecs.umich.edu). Also, IST/INESC, Lisbon, Portugal
(jpms@inesc.pt)
